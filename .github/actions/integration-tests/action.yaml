name: Fast Integration Tests
description: Optimized cross-platform integration tests for CLI (sub-1-minute runtime)

inputs:
  test_scenario:
    description: 'Test scenario to run (basic, full)'
    required: false
    default: 'basic'

runs:
  using: composite
  steps:
    - name: Quick Local Test
      shell: bash
      run: |
        echo "üöÄ Running quick local integration test..."
        # Use our optimized script for fast local testing
        chmod +x .github/scripts/quick-integration-test.sh
        ./.github/scripts/quick-integration-test.sh

    - name: Setup for Global Tests
      shell: bash
      run: |
        echo "üîß Setting up for global CLI tests..."
        start_time=$(date +%s)

        # Pack for installation (don't install globally yet)
        npm pack --silent
        TARBALL=$(ls jbabin91-tsc-files-*.tgz | head -n1)
        echo "üì¶ Package created: $TARBALL"

        # Install TypeScript globally (cached by GitHub Actions)
        echo "üîß Installing TypeScript..."
        npm install -g typescript@latest --silent

        setup_end=$(date +%s)
        echo "‚úÖ Setup completed in $((setup_end - start_time))s"

    - name: Run Core Tests
      shell: bash
      run: |
        echo "üß™ Running core integration tests..."
        test_start=$(date +%s)

        # Create test workspace
        mkdir -p integration-test-workspace
        cd integration-test-workspace

        # Install tsc-files locally (faster than global)
        TARBALL="../$(ls ../jbabin91-tsc-files-*.tgz | head -n1)"
        npm init -y > /dev/null 2>&1
        npm install "$TARBALL" --silent > /dev/null 2>&1

        # Create minimal tsconfig.json
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF

        # Test 1: Valid TypeScript file
        echo 'const message: string = "Hello, World!"; console.log(message);' > valid.ts
        echo "  üîç Testing valid TypeScript file..."
        if npx tsc-files valid.ts; then
          echo "  ‚úÖ Valid file test passed"
        else
          echo "  ‚ùå Valid file test failed"
          exit 1
        fi

        # Test 2: Type error detection
        echo 'const x: string = 123;' > error.ts
        echo "  üîç Testing type error detection..."
        if npx tsc-files error.ts 2>/dev/null; then
          echo "  ‚ùå Type error test failed (should have detected error)"
          exit 1
        else
          echo "  ‚úÖ Type error detection passed"
        fi

        # Test 3: CLI flags (quick tests only)
        echo "  üîç Testing CLI flags..."
        if npx tsc-files --help | grep -q "Usage:"; then
          echo "  ‚úÖ Help flag test passed"
        else
          echo "  ‚ùå Help flag test failed"
          exit 1
        fi

        if npx tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
          echo "  ‚úÖ Version flag test passed"
        else
          echo "  ‚ùå Version flag test failed"
          exit 1
        fi

        test_end=$(date +%s)
        echo "‚úÖ Core tests completed in $((test_end - test_start))s"

    - name: Run Extended Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running extended integration tests..."
        extended_start=$(date +%s)

        cd integration-test-workspace

        # Test 5: Glob patterns
        mkdir -p src/utils
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "../types"; export const createUser = (data: User) => data;' > src/utils/userService.ts
        echo "  üîç Testing glob patterns..."
        if tsc-files "src/**/*.ts"; then
          echo "  ‚úÖ Glob patterns test passed"
        else
          echo "  ‚ùå Glob patterns test failed"
          exit 1
        fi

        # Test 6: JSON output
        echo "  üîç Testing JSON output..."
        OUTPUT=$(tsc-files --json src/types.ts 2>/dev/null)
        if echo "$OUTPUT" | grep -q '"success"'; then
          echo "  ‚úÖ JSON output test passed"
        else
          echo "  ‚ùå JSON output test failed"
          exit 1
        fi

        # Test 7: Custom tsconfig
        cat > custom.tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2018",
            "strict": false,
            "skipLibCheck": true
          }
        }
        EOF
        echo "  üîç Testing custom tsconfig..."
        if tsc-files --project custom.tsconfig.json src/types.ts; then
          echo "  ‚úÖ Custom tsconfig test passed"
        else
          echo "  ‚ùå Custom tsconfig test failed"
          exit 1
        fi

        extended_end=$(date +%s)
        echo "‚úÖ Extended tests completed in $((extended_end - extended_start))s"

    - name: Basic Package Manager Detection
      if: inputs.test_scenario == 'basic'
      shell: bash
      run: |
        echo "üß™ Testing basic package manager detection..."
        pm_start=$(date +%s)

        # Simple detection test - just verify tools exist
        echo "  üîç Checking available package managers..."
        if command -v npm &> /dev/null; then
          echo "  ‚úÖ npm available"
        fi

        if command -v pnpm &> /dev/null; then
          echo "  ‚úÖ pnpm available"
        fi

        pm_end=$(date +%s)
        echo "‚úÖ Package manager detection completed in $((pm_end - pm_start))s"

    - name: Performance Test with Package Managers
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running performance tests (simplified for speed)..."
        perf_start=$(date +%s)

        # Quick performance test with local installation only
        cd integration-test-workspace
        echo "  üîç Testing performance with multiple files..."

        # Create additional test files
        mkdir -p src
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "./types"; export const users: User[] = [];' > src/users.ts

        # Time the execution
        time_start=$(date +%s)
        npx tsc-files src/*.ts > /dev/null 2>&1
        time_end=$(date +%s)
        duration=$((time_end - time_start))

        echo "  ‚úÖ Multi-file test completed in ${duration}s"

        perf_end=$(date +%s)
        total_perf=$((perf_end - perf_start))
        echo "‚úÖ Performance tests completed in ${total_perf}s"

    - name: Performance Summary
      shell: bash
      run: |
        end_time=$(date +%s)
        total_time=$((end_time - start_time))

        echo ""
        echo "üèÅ Integration Test Summary"
        echo "‚è±Ô∏è  Total runtime: ${total_time}s"

        # More realistic CI targets
        if (( total_time <= 45 )); then
          echo "üéØ EXCELLENT: Under 45 seconds!"
        elif (( total_time <= 75 )); then
          echo "‚úÖ GOOD: Under 75 seconds!"
        elif (( total_time <= 90 )); then
          echo "‚ö†Ô∏è ACCEPTABLE: Under 90 seconds"
        else
          echo "‚ùå TOO SLOW: Exceeded 90 second target"
          exit 1
        fi

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        # Cleanup test artifacts
        rm -rf integration-test-workspace
        rm -f jbabin91-tsc-files-*.tgz
