name: Integration Tests
description: Cross-platform integration tests for CLI

inputs:
  test_scenario:
    description: 'Test scenario to run (basic, full)'
    required: false
    default: 'basic'

runs:
  using: composite
  steps:
    - name: Initialize Timing
      shell: bash
      run: |
        echo "INTEGRATION_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Quick Built Package Test
      shell: bash
      run: |
        echo "üöÄ Quick Built Package Test"
        START_TIME=$(date +%s)

        # Skip build in CI - assume dist/ already exists from Build Package step
        if [[ "$CI" == "true" ]]; then
            echo "üì¶ Skipping build in CI (using pre-built package)..."
        else
            echo "üì¶ Building..."
            pnpm build --silent
        fi

        # Create test directory
        TEST_DIR="quick-test-$$"
        mkdir -p "$TEST_DIR"
        cd "$TEST_DIR"

        # Install TypeScript in test directory for CLI execution
        echo "  Installing TypeScript for test environment..."
        npm init -y > /dev/null 2>&1
        npm install typescript --no-audit --no-fund > /dev/null 2>&1

        # Create minimal test setup
        echo '{"compilerOptions": {"target": "ES2020", "strict": true}}' > tsconfig.json
        echo 'const message: string = "Hello";' > valid.ts
        echo 'const x: string = 123;' > error.ts

        # Test using the built CLI directly
        CLI_PATH="../dist/cli.js"

        echo "üß™ Running tests..."

        # Test 1: Valid file
        echo "  Testing valid file..."
        if node "$CLI_PATH" valid.ts > /dev/null 2>&1; then
            echo "  ‚úÖ Valid file test passed"
        else
            echo "  ‚ùå Valid file test failed"
            exit 1
        fi

        # Test 2: Error detection
        echo "  Testing error detection..."
        if node "$CLI_PATH" error.ts > /dev/null 2>&1; then
            echo "  ‚ùå Error detection test failed"
            exit 1
        else
            echo "  ‚úÖ Error detection test passed"
        fi

        # Test 3: Help flag
        echo "  Testing help flag..."
        if node "$CLI_PATH" --help | grep -q "Usage:"; then
            echo "  ‚úÖ Help flag test passed"
        else
            echo "  ‚ùå Help flag test failed"
            exit 1
        fi

        # Test 4: Version flag
        echo "  Testing version flag..."
        if node "$CLI_PATH" --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "  ‚úÖ Version flag test passed"
        else
            echo "  ‚ùå Version flag test failed"
            exit 1
        fi

        # Cleanup
        cd ..
        rm -rf "$TEST_DIR"

        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))

        echo ""
        echo "‚úÖ All tests passed in ${DURATION}s"

        if (( DURATION <= 5 )); then
            echo "üéØ EXCELLENT performance!"
        elif (( DURATION <= 10 )); then
            echo "‚úÖ Good performance"
        else
            echo "‚ö†Ô∏è Could be faster (${DURATION}s)"
        fi

    - name: Package CLI
      shell: bash
      run: |
        echo "üì¶ Packaging CLI for real-world testing..."
        pack_start=$(date +%s)

        # Pack the package (creates tarball)
        npm pack --silent
        TARBALL=$(ls jbabin91-tsc-files-*.tgz | head -n1)
        echo "üì¶ Package created: $TARBALL"

        pack_end=$(date +%s)
        echo "‚úÖ Packaging completed in $((pack_end - pack_start))s"

    - name: Run Core Tests
      shell: bash
      run: |
        echo "üß™ Running core integration tests..."
        test_start=$(date +%s)

        # Create isolated test workspace (outside parent project to avoid packageManager inheritance)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi
        mkdir -p "$TEST_DIR"
        cd "$TEST_DIR"

        # Install the actual packaged CLI locally (like users would)
        TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
        echo "üì¶ Installing $TARBALL and TypeScript..."
        npm init -y > /dev/null 2>&1

        # Windows-specific npm optimizations
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }
        else
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }
        fi

        # Create minimal tsconfig.json
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF

        # Skip basic tests here - they're already covered by Quick Local Test
        echo "  ‚ÑπÔ∏è Basic functionality already verified by Quick Local Test"

        # Test: Real-world package installation verification
        echo "  üîç Verifying installed package works..."
        echo 'const pkg: string = "installed-test";' > pkg-test.ts
        if npx tsc-files pkg-test.ts; then
          echo "  ‚úÖ Package installation verification passed"
        else
          echo "  ‚ùå Package installation verification failed"
          exit 1
        fi

        test_end=$(date +%s)
        echo "‚úÖ Core tests completed in $((test_end - test_start))s"

    - name: Run Extended Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running extended integration tests..."
        extended_start=$(date +%s)

        # Use the same isolated test directory (create if needed)
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for extended tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for extended tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Test 5: Glob patterns
        mkdir -p src/utils
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "../types"; export const createUser = (data: User) => data;' > src/utils/userService.ts
        echo "  üîç Testing glob patterns..."
        if npx tsc-files "src/**/*.ts"; then
          echo "  ‚úÖ Glob patterns test passed"
        else
          echo "  ‚ùå Glob patterns test failed"
          exit 1
        fi

        # Test 6: JSON output
        echo "  üîç Testing JSON output..."
        OUTPUT=$(npx tsc-files --json src/types.ts 2>/dev/null)
        if echo "$OUTPUT" | grep -q '"success"'; then
          echo "  ‚úÖ JSON output test passed"
        else
          echo "  ‚ùå JSON output test failed"
          exit 1
        fi

        # Test 7: Custom tsconfig
        cat > custom.tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2018",
            "strict": false,
            "skipLibCheck": true
          }
        }
        EOF
        echo "  üîç Testing custom tsconfig..."
        if npx tsc-files --project custom.tsconfig.json src/types.ts; then
          echo "  ‚úÖ Custom tsconfig test passed"
        else
          echo "  ‚ùå Custom tsconfig test failed"
          exit 1
        fi

        extended_end=$(date +%s)
        echo "‚úÖ Extended tests completed in $((extended_end - extended_start))s"

    - name: Package Manager CLI Tests
      if: inputs.test_scenario == 'basic'
      shell: bash
      run: |
        echo "üß™ Testing package manager CLI integration..."
        pm_start=$(date +%s)

        # Use the same isolated test directory (create if needed)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi

        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for package manager tests..."
          npm init -y > /dev/null 2>&1

          # Windows-specific npm optimizations
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || {
              echo "‚ùå Failed to install $TARBALL"
              exit 1
            }
          else
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
              echo "‚ùå Failed to install $TARBALL"
              exit 1
            }
          fi

          # Create minimal tsconfig.json for package manager tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Test package manager detection and CLI availability
        echo "  üîç Testing package manager CLI integration..."

        # Verify the package provides the tsc-files binary
        if ./node_modules/.bin/tsc-files --version > /dev/null 2>&1; then
          echo "  ‚úÖ Direct tsc-files binary works"
        else
          echo "  ‚ùå Direct tsc-files binary failed"
          exit 1
        fi

        # Test with available package managers (functionality, not version)
        echo 'const test: string = "pm-test";' > pm-test.ts

        # Skip heavy package manager tests on Windows for speed
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "  ‚ÑπÔ∏è Skipping package manager integration tests on Windows for performance"
        else
          # Test pnpm if available
          if command -v pnpm &> /dev/null; then
            echo "  üîç Testing pnpm tsc-files functionality..."
            if pnpm tsc-files pm-test.ts > /dev/null 2>&1; then
              echo "  ‚úÖ pnpm tsc-files works"
            else
              echo "  ‚ö†Ô∏è pnpm tsc-files failed"
            fi
          else
            echo "  ‚ÑπÔ∏è pnpm not available, skipping pnpm test"
          fi

          # Test yarn if available
          if command -v yarn &> /dev/null; then
            echo "  üîç Testing yarn tsc-files functionality..."
            if yarn tsc-files pm-test.ts > /dev/null 2>&1; then
              echo "  ‚úÖ yarn tsc-files works"
            else
              echo "  ‚ö†Ô∏è yarn tsc-files failed"
            fi
          else
            echo "  ‚ÑπÔ∏è yarn not available, skipping yarn test"
          fi

          # Test bun if available
          if command -v bun &> /dev/null; then
            echo "  üîç Testing bun tsc-files functionality..."
            if bun tsc-files pm-test.ts > /dev/null 2>&1; then
              echo "  ‚úÖ bun tsc-files works"
            else
              echo "  ‚ö†Ô∏è bun tsc-files failed"
            fi
          else
            echo "  ‚ÑπÔ∏è bun not available, skipping bun test"
          fi
        fi

        # Test traditional npx (most critical - must work)
        echo "  üîç Testing npx tsc-files functionality..."
        if npx tsc-files pm-test.ts > /dev/null 2>&1; then
          echo "  ‚úÖ npx tsc-files works"
        else
          echo "  ‚ùå npx tsc-files failed"
          exit 1
        fi

        pm_end=$(date +%s)
        echo "‚úÖ Package manager CLI tests completed in $((pm_end - pm_start))s"

    - name: Performance Test with Package Managers
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running performance tests (simplified for speed)..."
        perf_start=$(date +%s)

        # Quick performance test with installed package
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for performance tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for performance tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi
        echo "  üîç Testing performance with multiple files..."

        # Create additional test files
        mkdir -p src
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "./types"; export const users: User[] = [];' > src/users.ts

        # Time the execution
        time_start=$(date +%s)
        npx tsc-files src/*.ts > /dev/null 2>&1
        time_end=$(date +%s)
        duration=$((time_end - time_start))

        echo "  ‚úÖ Multi-file test completed in ${duration}s"

        perf_end=$(date +%s)
        total_perf=$((perf_end - perf_start))
        echo "‚úÖ Performance tests completed in ${total_perf}s"

    - name: Performance Summary
      shell: bash
      run: |
        end_time=$(date +%s)
        total_time=$((end_time - INTEGRATION_START_TIME))

        echo ""
        echo "üèÅ Integration Test Summary"
        echo "‚è±Ô∏è  Total runtime: ${total_time}s"

        # Platform-specific performance targets
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Windows is slower due to process spawning overhead
          if (( total_time <= 90 )); then
            echo "üéØ EXCELLENT: Under 90 seconds for Windows!"
          elif (( total_time <= 120 )); then
            echo "‚úÖ GOOD: Under 2 minutes for Windows!"
          elif (( total_time <= 180 )); then
            echo "‚ö†Ô∏è ACCEPTABLE: Under 3 minutes for Windows"
          else
            echo "‚ùå TOO SLOW: Exceeded 3 minute Windows target"
            exit 1
          fi
        else
          # Unix/macOS targets (faster)
          if (( total_time <= 45 )); then
            echo "üéØ EXCELLENT: Under 45 seconds!"
          elif (( total_time <= 75 )); then
            echo "‚úÖ GOOD: Under 75 seconds!"
          elif (( total_time <= 90 )); then
            echo "‚ö†Ô∏è ACCEPTABLE: Under 90 seconds"
          else
            echo "‚ùå TOO SLOW: Exceeded 90 second target"
            exit 1
          fi
        fi

        # Cleanup temporary test directory
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi
        if [ -d "$TEST_DIR" ]; then
          rm -rf "$TEST_DIR"
          echo "üßπ Cleaned up test directory"
        fi
