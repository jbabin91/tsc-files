name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Static Analysis
        uses: ./.github/actions/static-analysis
      - name: Build Package
        uses: ./.github/actions/build-package

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build Package
        uses: ./.github/actions/build-package
      - name: Unit Tests
        uses: ./.github/actions/unit-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration:
    if: github.event_name != 'merge_group'
    runs-on: ${{ matrix.os }}
    needs: [static-analysis, unit-tests]
    timeout-minutes: ${{ matrix.timeout }} # Platform-specific timeout for performance validation
    strategy:
      fail-fast: false # Test all platforms even if one fails
      matrix:
        include:
          # Ubuntu: Full test suite (fastest runner)
          - os: ubuntu-latest
            test_scenario: full
            timeout: 2
          # macOS: Basic tests (ARM performance validation)
          - os: macos-latest
            test_scenario: basic
            timeout: 3
          # Windows: Basic tests (compatibility validation) - needs more time for process spawning
          - os: windows-latest
            test_scenario: basic
            timeout: 4
    steps:
      - uses: actions/checkout@v5
      - name: Setup
        uses: ./.github/actions/setup
      - name: Setup Additional Package Managers
        shell: bash
        run: |
          echo "ðŸ”§ Setting up additional package managers for integration testing..."

          # Enable yarn via corepack (fastest method)
          echo "  ðŸ“¦ Enabling yarn via corepack..."
          corepack enable yarn
          echo "  âœ… yarn $(yarn --version)"
      - name: Setup Bun
        if: runner.os != 'Windows'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Build Package
        uses: ./.github/actions/build-package
      - name: Integration Tests
        uses: ./.github/actions/integration-tests
        with:
          test_scenario: ${{ matrix.test_scenario }}
