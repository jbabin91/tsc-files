name: Fast Integration Tests
description: Optimized cross-platform integration tests for CLI (sub-1-minute runtime)

inputs:
  test_scenario:
    description: 'Test scenario to run (basic, full)'
    required: false
    default: 'basic'

runs:
  using: composite
  steps:
    - name: Initialize Timing
      shell: bash
      run: |
        echo "INTEGRATION_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Quick Local Test
      shell: bash
      run: |
        echo "üöÄ Running quick local integration test..."
        # Use our optimized script for fast local testing
        chmod +x .github/scripts/quick-integration-test.sh
        ./.github/scripts/quick-integration-test.sh

    - name: Package CLI
      shell: bash
      run: |
        echo "üì¶ Packaging CLI for real-world testing..."
        pack_start=$(date +%s)

        # Pack the package (creates tarball)
        npm pack --silent
        TARBALL=$(ls jbabin91-tsc-files-*.tgz | head -n1)
        echo "üì¶ Package created: $TARBALL"

        pack_end=$(date +%s)
        echo "‚úÖ Packaging completed in $((pack_end - pack_start))s"

    - name: Run Core Tests
      shell: bash
      run: |
        echo "üß™ Running core integration tests..."
        test_start=$(date +%s)

        # Create isolated test workspace (outside parent project to avoid packageManager inheritance)
        TEST_DIR="/tmp/tsc-files-integration-$$"
        mkdir -p "$TEST_DIR"
        cd "$TEST_DIR"

        # Install the actual packaged CLI locally (like users would)
        TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
        echo "üì¶ Installing $TARBALL and TypeScript..."
        npm init -y > /dev/null 2>&1
        npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
          echo "‚ùå Failed to install $TARBALL"
          exit 1
        }

        # Create minimal tsconfig.json
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF

        # Test 1: Valid TypeScript file
        echo 'const message: string = "Hello, World!"; console.log(message);' > valid.ts
        echo "  üîç Testing valid TypeScript file..."
        if npx tsc-files valid.ts; then
          echo "  ‚úÖ Valid file test passed"
        else
          echo "  ‚ùå Valid file test failed"
          exit 1
        fi

        # Test 2: Type error detection
        echo 'const x: string = 123;' > error.ts
        echo "  üîç Testing type error detection..."
        if npx tsc-files error.ts 2>/dev/null; then
          echo "  ‚ùå Type error test failed (should have detected error)"
          exit 1
        else
          echo "  ‚úÖ Type error detection passed"
        fi

        # Test 3: CLI flags (quick tests only)
        echo "  üîç Testing CLI flags..."
        if npx tsc-files --help | grep -q "Usage:"; then
          echo "  ‚úÖ Help flag test passed"
        else
          echo "  ‚ùå Help flag test failed"
          exit 1
        fi

        if npx tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
          echo "  ‚úÖ Version flag test passed"
        else
          echo "  ‚ùå Version flag test failed"
          exit 1
        fi

        test_end=$(date +%s)
        echo "‚úÖ Core tests completed in $((test_end - test_start))s"

    - name: Run Extended Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running extended integration tests..."
        extended_start=$(date +%s)

        # Use the same isolated test directory (create if needed)
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for extended tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for extended tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Test 5: Glob patterns
        mkdir -p src/utils
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "../types"; export const createUser = (data: User) => data;' > src/utils/userService.ts
        echo "  üîç Testing glob patterns..."
        if npx tsc-files "src/**/*.ts"; then
          echo "  ‚úÖ Glob patterns test passed"
        else
          echo "  ‚ùå Glob patterns test failed"
          exit 1
        fi

        # Test 6: JSON output
        echo "  üîç Testing JSON output..."
        OUTPUT=$(npx tsc-files --json src/types.ts 2>/dev/null)
        if echo "$OUTPUT" | grep -q '"success"'; then
          echo "  ‚úÖ JSON output test passed"
        else
          echo "  ‚ùå JSON output test failed"
          exit 1
        fi

        # Test 7: Custom tsconfig
        cat > custom.tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2018",
            "strict": false,
            "skipLibCheck": true
          }
        }
        EOF
        echo "  üîç Testing custom tsconfig..."
        if npx tsc-files --project custom.tsconfig.json src/types.ts; then
          echo "  ‚úÖ Custom tsconfig test passed"
        else
          echo "  ‚ùå Custom tsconfig test failed"
          exit 1
        fi

        extended_end=$(date +%s)
        echo "‚úÖ Extended tests completed in $((extended_end - extended_start))s"

    - name: Package Manager CLI Tests
      if: inputs.test_scenario == 'basic'
      shell: bash
      run: |
        echo "üß™ Testing package manager CLI integration..."
        pm_start=$(date +%s)

        # Use the same isolated test directory (create if needed)
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for package manager tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for package manager tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Test direct binary usage (package should provide tsc-files command)
        echo "  üîç Testing direct tsc-files binary..."
        if ./node_modules/.bin/tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
          echo "  ‚úÖ Direct tsc-files binary works"
        else
          echo "  ‚ùå Direct tsc-files binary failed"
          exit 1
        fi

        # Test pnpm if available (should find the binary)
        if command -v pnpm &> /dev/null; then
          echo "  üîç Testing pnpm tsc-files..."
          if pnpm tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "  ‚úÖ pnpm tsc-files works"
          else
            echo "  ‚ö†Ô∏è pnpm tsc-files failed"
          fi
        else
          echo "  ‚ÑπÔ∏è pnpm not available, skipping pnpm test"
        fi

        # Test yarn if available
        if command -v yarn &> /dev/null; then
          echo "  üîç Testing yarn tsc-files..."
          if yarn tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "  ‚úÖ yarn tsc-files works"
          else
            echo "  ‚ö†Ô∏è yarn tsc-files failed"
          fi
        else
          echo "  ‚ÑπÔ∏è yarn not available, skipping yarn test"
        fi

        # Test bun if available
        if command -v bun &> /dev/null; then
          echo "  üîç Testing bun tsc-files..."
          if bun tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
            echo "  ‚úÖ bun tsc-files works"
          else
            echo "  ‚ö†Ô∏è bun tsc-files failed"
          fi
        else
          echo "  ‚ÑπÔ∏è bun not available, skipping bun test"
        fi

        # Test traditional npx (still widely used)
        echo "  üîç Testing npx tsc-files..."
        if npx tsc-files --version | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then
          echo "  ‚úÖ npx tsc-files works"
        else
          echo "  ‚ùå npx tsc-files failed"
          exit 1
        fi

        pm_end=$(date +%s)
        echo "‚úÖ Package manager CLI tests completed in $((pm_end - pm_start))s"

    - name: Performance Test with Package Managers
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running performance tests (simplified for speed)..."
        perf_start=$(date +%s)

        # Quick performance test with installed package
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for performance tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for performance tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi
        echo "  üîç Testing performance with multiple files..."

        # Create additional test files
        mkdir -p src
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "./types"; export const users: User[] = [];' > src/users.ts

        # Time the execution
        time_start=$(date +%s)
        npx tsc-files src/*.ts > /dev/null 2>&1
        time_end=$(date +%s)
        duration=$((time_end - time_start))

        echo "  ‚úÖ Multi-file test completed in ${duration}s"

        perf_end=$(date +%s)
        total_perf=$((perf_end - perf_start))
        echo "‚úÖ Performance tests completed in ${total_perf}s"

    - name: Performance Summary
      shell: bash
      run: |
        end_time=$(date +%s)
        total_time=$((end_time - INTEGRATION_START_TIME))

        echo ""
        echo "üèÅ Integration Test Summary"
        echo "‚è±Ô∏è  Total runtime: ${total_time}s"

        # More realistic CI targets
        if (( total_time <= 45 )); then
          echo "üéØ EXCELLENT: Under 45 seconds!"
        elif (( total_time <= 75 )); then
          echo "‚úÖ GOOD: Under 75 seconds!"
        elif (( total_time <= 90 )); then
          echo "‚ö†Ô∏è ACCEPTABLE: Under 90 seconds"
        else
          echo "‚ùå TOO SLOW: Exceeded 90 second target"
          exit 1
        fi

        # Cleanup temporary test directory
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ -d "$TEST_DIR" ]; then
          rm -rf "$TEST_DIR"
          echo "üßπ Cleaned up test directory"
        fi
