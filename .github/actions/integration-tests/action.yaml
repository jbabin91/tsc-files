name: Integration Tests
description: Cross-platform integration tests for CLI

inputs:
  test_scenario:
    description: 'Test scenario to run (basic, full)'
    required: false
    default: 'basic'

runs:
  using: composite
  steps:
    - name: Initialize Timing
      shell: bash
      run: |
        echo "INTEGRATION_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Package CLI
      shell: bash
      run: |
        echo "üì¶ Packaging CLI for real-world testing..."
        pack_start=$(date +%s)

        # Pack the package (creates tarball)
        npm pack --silent
        TARBALL=$(ls jbabin91-tsc-files-*.tgz | head -n1)
        echo "üì¶ Package created: $TARBALL"

        pack_end=$(date +%s)
        echo "‚úÖ Packaging completed in $((pack_end - pack_start))s"

    - name: Run Core Package Tests
      shell: bash
      run: |
        echo "üß™ Running comprehensive package integration tests..."
        test_start=$(date +%s)

        # Create isolated test workspace (outside parent project to avoid packageManager inheritance)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi
        mkdir -p "$TEST_DIR"
        cd "$TEST_DIR"

        # Install the actual packaged CLI locally (like users would)
        TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
        echo "üì¶ Installing $TARBALL and TypeScript..."
        npm init -y > /dev/null 2>&1

        # Windows-specific npm optimizations
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }
        else
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }
        fi

        # Create test files for comprehensive testing
        cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF

        echo 'const valid: string = "Hello, TypeScript!";' > valid.ts
        echo 'const error: string = 123; // Type error' > error.ts

        echo "üß™ Running comprehensive package tests..."

        # Test 1: Version flag
        echo "  üîç Testing version flag..."
        VERSION_OUTPUT=$(npx tsc-files --version 2>&1 || true)
        if echo "$VERSION_OUTPUT" | grep -E "[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?"; then
          echo "  ‚úÖ Version flag test passed"
        else
          echo "  ‚ùå Version flag test failed"
          echo "Version output was: $VERSION_OUTPUT"
          exit 1
        fi

        # Test 2: Help flag
        echo "  üîç Testing help flag..."
        HELP_OUTPUT=$(npx tsc-files --help 2>&1 || true)
        if echo "$HELP_OUTPUT" | grep -q "Usage:"; then
          echo "  ‚úÖ Help flag test passed"
        else
          echo "  ‚ùå Help flag test failed"
          echo "Help output was: $HELP_OUTPUT"
          exit 1
        fi

        # Test 3: Valid file type checking
        echo "  üîç Testing valid file type checking..."
        if npx tsc-files valid.ts > /dev/null 2>&1; then
          echo "  ‚úÖ Valid file test passed"
        else
          echo "  ‚ùå Valid file test failed"
          exit 1
        fi

        # Test 4: Error detection
        echo "  üîç Testing error detection..."
        if npx tsc-files error.ts > /dev/null 2>&1; then
          echo "  ‚ùå Error detection test failed (should have detected error)"
          exit 1
        else
          echo "  ‚úÖ Error detection test passed"
        fi

        test_end=$(date +%s)
        echo "‚úÖ Core package tests completed in $((test_end - test_start))s"

    - name: Run Extended Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running extended integration tests..."
        extended_start=$(date +%s)

        # Use the same isolated test directory (create if needed)
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for extended tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for extended tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Test 5: Glob patterns
        mkdir -p src/utils
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "../types"; export const createUser = (data: User) => data;' > src/utils/userService.ts
        echo "  üîç Testing glob patterns..."
        if npx tsc-files "src/**/*.ts"; then
          echo "  ‚úÖ Glob patterns test passed"
        else
          echo "  ‚ùå Glob patterns test failed"
          exit 1
        fi

        # Test 6: JSON output
        echo "  üîç Testing JSON output..."
        OUTPUT=$(npx tsc-files --json src/types.ts 2>/dev/null)
        if echo "$OUTPUT" | grep -q '"success"'; then
          echo "  ‚úÖ JSON output test passed"
        else
          echo "  ‚ùå JSON output test failed"
          exit 1
        fi

        # Test 7: Custom tsconfig
        cat > custom.tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2018",
            "strict": false,
            "skipLibCheck": true
          }
        }
        EOF
        echo "  üîç Testing custom tsconfig..."
        if npx tsc-files --project custom.tsconfig.json src/types.ts; then
          echo "  ‚úÖ Custom tsconfig test passed"
        else
          echo "  ‚ùå Custom tsconfig test failed"
          exit 1
        fi

        extended_end=$(date +%s)
        echo "‚úÖ Extended tests completed in $((extended_end - extended_start))s"

    - name: Path Aliases and BaseUrl Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Testing path aliases with baseUrl..."
        paths_start=$(date +%s)

        # Use the same isolated test directory
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi

        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Installing $TARBALL for path alias tests..."
          npm init -y > /dev/null 2>&1

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || exit 1
          else
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || exit 1
          fi
        else
          cd "$TEST_DIR"
        fi

        # Create directory structure for path aliases
        mkdir -p src/components lib/utils

        # Create tsconfig with path aliases and baseUrl
        cat > tsconfig.paths.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true,
            "baseUrl": ".",
            "paths": {
              "@/components/*": ["src/components/*"],
              "@/utils/*": ["lib/utils/*"]
            }
          }
        }
        EOF

        # Create test files using path aliases
        echo 'export interface Props { title: string; }' > src/components/types.ts
        echo 'export const formatText = (text: string) => text.toUpperCase();' > lib/utils/format.ts
        echo 'import { Props } from "@/components/types"; import { formatText } from "@/utils/format"; export const component = (props: Props) => formatText(props.title);' > src/app.ts

        # Test path alias resolution with tsc (default)
        echo "  üîç Testing path aliases with tsc..."
        if npx tsc-files --project tsconfig.paths.json src/app.ts > /dev/null 2>&1; then
          echo "  ‚úÖ Path aliases with baseUrl test passed"
        else
          echo "  ‚ùå Path aliases with baseUrl test failed"
          exit 1
        fi

        paths_end=$(date +%s)
        echo "‚úÖ Path aliases tests completed in $((paths_end - paths_start))s"

    - name: Generated Files Discovery Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Testing generated files discovery..."
        gen_start=$(date +%s)

        # Use the same isolated test directory
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi

        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Installing $TARBALL for generated files tests..."
          npm init -y > /dev/null 2>&1

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || exit 1
          else
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || exit 1
          fi

          # Create minimal tsconfig
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Create generated files (simulating TanStack Router, etc.)
        mkdir -p src/routes

        # Create a generated route tree file
        cat > src/routeTree.gen.ts << 'EOF'
        export interface Route {
          path: string;
          component: any;
        }
        export const routes: Route[] = [
          { path: '/_public/demo', component: null }
        ];
        EOF

        # Create other generated files
        echo 'export interface GeneratedTypes { id: number; }' > src/types.gen.ts
        echo 'export const apiSchema = { version: "1.0" };' > src/api.generated.ts

        # Create a file that uses the generated types
        echo 'import { Route } from "./routeTree.gen"; import { GeneratedTypes } from "./types.gen"; export const useRoute = (route: Route, data: GeneratedTypes) => ({ route, data });' > src/app.ts

        # Test that generated files are discovered for type resolution
        echo "  üîç Testing generated files are included for type resolution..."
        if npx tsc-files src/app.ts > /dev/null 2>&1; then
          echo "  ‚úÖ Generated files discovery test passed"
        else
          echo "  ‚ùå Generated files discovery test failed"
          npx tsc-files src/app.ts
          exit 1
        fi

        gen_end=$(date +%s)
        echo "‚úÖ Generated files tests completed in $((gen_end - gen_start))s"

    - name: Compiler Selection Tests
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Testing compiler selection (tsc/tsgo)..."
        compiler_start=$(date +%s)

        # Use the same isolated test directory
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi

        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Installing $TARBALL for compiler tests..."
          npm init -y > /dev/null 2>&1

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || exit 1
          else
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || exit 1
          fi

          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Create a simple test file
        echo 'const test: string = "compiler-test";' > compiler-test.ts

        # Test --use-tsc flag (should always work)
        echo "  üîç Testing --use-tsc flag..."
        if npx tsc-files --use-tsc compiler-test.ts > /dev/null 2>&1; then
          echo "  ‚úÖ --use-tsc flag test passed"
        else
          echo "  ‚ùå --use-tsc flag test failed"
          exit 1
        fi

        # Test --show-compiler flag
        echo "  üîç Testing --show-compiler flag..."
        COMPILER_OUTPUT=$(npx tsc-files --show-compiler compiler-test.ts 2>&1 || true)
        if echo "$COMPILER_OUTPUT" | grep -qE "(tsc|tsgo)"; then
          echo "  ‚úÖ --show-compiler flag test passed"
        else
          echo "  ‚ö†Ô∏è --show-compiler flag test inconclusive"
        fi

        # Test --use-tsgo flag (might not be available)
        echo "  üîç Testing --use-tsgo flag availability..."
        TSGO_OUTPUT=$(npx tsc-files --use-tsgo compiler-test.ts 2>&1 || true)
        if echo "$TSGO_OUTPUT" | grep -q "not available"; then
          echo "  ‚ÑπÔ∏è tsgo not available on this platform (expected)"
        elif npx tsc-files --use-tsgo compiler-test.ts > /dev/null 2>&1; then
          echo "  ‚úÖ tsgo is available and working"
        else
          echo "  ‚ö†Ô∏è tsgo test inconclusive"
        fi

        compiler_end=$(date +%s)
        echo "‚úÖ Compiler selection tests completed in $((compiler_end - compiler_start))s"

    - name: Package Manager CLI Tests
      if: inputs.test_scenario == 'basic'
      shell: bash
      run: |
        echo "üß™ Testing package manager CLI integration..."
        pm_start=$(date +%s)

        # Use the same isolated test directory (create if needed)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi

        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for package manager tests..."
          npm init -y > /dev/null 2>&1

          # Windows-specific npm optimizations
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent --progress=false --loglevel=error 2>/dev/null || {
              echo "‚ùå Failed to install $TARBALL"
              exit 1
            }
          else
            npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
              echo "‚ùå Failed to install $TARBALL"
              exit 1
            }
          fi

          # Create minimal tsconfig.json for package manager tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi

        # Test package manager CLI integration
        echo "  üîç Testing package manager CLI integration..."

        # Test that npx can find and execute the package
        NPXVERSION_OUTPUT=$(npx tsc-files --version 2>&1 || true)
        if echo "$NPXVERSION_OUTPUT" | grep -E "[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?"; then
          echo "  ‚úÖ npx tsc-files binary works"
        else
          echo "  ‚ùå npx tsc-files binary failed"
          echo "npx version output was: $NPXVERSION_OUTPUT"
          exit 1
        fi

        # Test with available package managers (functionality, not version)
        echo 'const test: string = "pm-test";' > pm-test.ts

        # Skip heavy package manager tests on Windows for speed
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "  ‚ÑπÔ∏è Skipping package manager integration tests on Windows for performance"
        else
          # Test pnpm if available
          if command -v pnpm &> /dev/null; then
            echo "  üîç Testing pnpm tsc-files functionality..."
            if pnpm tsc-files pm-test.ts > /dev/null 2>&1; then
              echo "  ‚úÖ pnpm tsc-files works"
            else
              echo "  ‚ö†Ô∏è pnpm tsc-files failed"
            fi
          else
            echo "  ‚ÑπÔ∏è pnpm not available, skipping pnpm test"
          fi

          # Test yarn if available
          if command -v yarn &> /dev/null; then
            echo "  üîç Testing yarn tsc-files functionality..."
            if yarn tsc-files pm-test.ts > /dev/null 2>&1; then
              echo "  ‚úÖ yarn tsc-files works"
            else
              echo "  ‚ö†Ô∏è yarn tsc-files failed"
            fi
          else
            echo "  ‚ÑπÔ∏è yarn not available, skipping yarn test"
          fi

          # Test bun if available
          if command -v bun &> /dev/null; then
            echo "  üîç Testing bun tsc-files functionality..."
            if bun tsc-files pm-test.ts > /dev/null 2>&1; then
              echo "  ‚úÖ bun tsc-files works"
            else
              echo "  ‚ö†Ô∏è bun tsc-files failed"
            fi
          else
            echo "  ‚ÑπÔ∏è bun not available, skipping bun test"
          fi
        fi

        # Test traditional npx (most critical - must work)
        echo "  üîç Testing npx tsc-files functionality..."
        if npx tsc-files pm-test.ts > /dev/null 2>&1; then
          echo "  ‚úÖ npx tsc-files works"
        else
          echo "  ‚ùå npx tsc-files failed"
          exit 1
        fi

        pm_end=$(date +%s)
        echo "‚úÖ Package manager CLI tests completed in $((pm_end - pm_start))s"

    - name: Performance Test with Package Managers
      if: inputs.test_scenario == 'full'
      shell: bash
      run: |
        echo "üß™ Running performance tests (simplified for speed)..."
        perf_start=$(date +%s)

        # Quick performance test with installed package
        TEST_DIR="/tmp/tsc-files-integration-$$"
        if [ ! -d "$TEST_DIR" ]; then
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"

          # Re-install the package if directory doesn't exist
          TARBALL="$(ls "$GITHUB_WORKSPACE"/jbabin91-tsc-files-*.tgz | head -n1)"
          echo "üì¶ Re-installing $TARBALL for performance tests..."
          npm init -y > /dev/null 2>&1
          npm install "$TARBALL" typescript --no-audit --no-fund --prefer-offline --silent 2>/dev/null || {
            echo "‚ùå Failed to install $TARBALL"
            exit 1
          }

          # Create minimal tsconfig.json for performance tests
          cat > tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true
          }
        }
        EOF
        else
          cd "$TEST_DIR"
        fi
        echo "  üîç Testing performance with multiple files..."

        # Create additional test files
        mkdir -p src
        echo 'export interface User { id: number; name: string; }' > src/types.ts
        echo 'import { User } from "./types"; export const users: User[] = [];' > src/users.ts

        # Time the execution
        time_start=$(date +%s)
        npx tsc-files src/*.ts > /dev/null 2>&1
        time_end=$(date +%s)
        duration=$((time_end - time_start))

        echo "  ‚úÖ Multi-file test completed in ${duration}s"

        perf_end=$(date +%s)
        total_perf=$((perf_end - perf_start))
        echo "‚úÖ Performance tests completed in ${total_perf}s"

    - name: Performance Summary
      shell: bash
      run: |
        end_time=$(date +%s)
        total_time=$((end_time - INTEGRATION_START_TIME))

        echo ""
        echo "üèÅ Integration Test Summary"
        echo "‚è±Ô∏è  Total runtime: ${total_time}s"

        # Platform-specific performance targets
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Windows is slower due to process spawning overhead
          if (( total_time <= 90 )); then
            echo "üéØ EXCELLENT: Under 90 seconds for Windows!"
          elif (( total_time <= 120 )); then
            echo "‚úÖ GOOD: Under 2 minutes for Windows!"
          elif (( total_time <= 180 )); then
            echo "‚ö†Ô∏è ACCEPTABLE: Under 3 minutes for Windows"
          else
            echo "‚ùå TOO SLOW: Exceeded 3 minute Windows target"
            exit 1
          fi
        else
          # Unix/macOS targets (faster)
          if (( total_time <= 45 )); then
            echo "üéØ EXCELLENT: Under 45 seconds!"
          elif (( total_time <= 75 )); then
            echo "‚úÖ GOOD: Under 75 seconds!"
          elif (( total_time <= 90 )); then
            echo "‚ö†Ô∏è ACCEPTABLE: Under 90 seconds"
          else
            echo "‚ùå TOO SLOW: Exceeded 90 second target"
            exit 1
          fi
        fi

        # Cleanup temporary test directory
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_DIR="$RUNNER_TEMP/tsc-files-integration-$$"
        else
          TEST_DIR="/tmp/tsc-files-integration-$$"
        fi
        if [ -d "$TEST_DIR" ]; then
          rm -rf "$TEST_DIR"
          echo "üßπ Cleaned up test directory"
        fi
